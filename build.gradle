buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath "org.openapitools:openapi-generator:6.6.0"
        classpath 'dev.trixiether:sample-codegen:0.0.1'
        classpath files("/src/main/resources")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.openapi.generator' version '6.6.0'
}

group = 'dev.trixiether'
version = '0.0.1'

def packageAlias = "dev.trixiether.sample"
def projectJavaFilesPath = "src/main/java/dev/trixiether/sample"
def openApiBuildPath = layout.buildDirectory.dir("generate-resources")
        .get().asFile.path

def openApiControllersDir = 'entry'
def openApiModelsDir = 'models'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.openapitools:openapi-generator-gradle-plugin:6.6.0"
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.19'
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.6'
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    compileOnly 'org.openapitools:openapi-generator:6.6.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// Root task for generating Spring files based on the OpenApi specification
// run only if new files need to be added
tasks.register('processOpenApiFiles') {
    dependsOn 'copyOpenApiGeneratedFiles'
}

tasks.register('copyOpenApiGeneratedFiles') {
    dependsOn 'openApiGenerate'
    doLast {
        def entryPath = "$openApiBuildPath/main/" +
                "$projectJavaFilesPath/$openApiControllersDir/" as String
        def modelsPath = "$openApiBuildPath/main/" +
                "$projectJavaFilesPath/$openApiModelsDir/" as String
        def invoker = "$openApiBuildPath/main/" +
                "$projectJavaFilesPath/" as String
        copy {
            from entryPath
            include '*.java'
            into "$rootDir/$projectJavaFilesPath/$openApiControllersDir"
        }
        copy {
            from modelsPath
            include '*.java'
            into "$rootDir/$projectJavaFilesPath/$openApiModelsDir"
        }
        copy {
            from invoker
            include '*.java'
            into "$rootDir/$projectJavaFilesPath"
        }
    }
}

openApiGenerate {
    generatorName = "sample-codegen"
    inputSpec = "$rootDir/src/main/open-api/openapi.yml"
    templateDir = "$rootDir/src/main/open-api/templates"
    apiPackage = packageAlias + ".$openApiControllersDir"
    modelPackage = packageAlias + ".$openApiModelsDir"
    invokerPackage = packageAlias
    configOptions = [
            "artifactId": "sample-back",
            "artifactVersion": project.version.toString(),
            "groupId": group.toString(),
            "useSwaggerUI" : "false",
            "configPackage" : packageAlias + ".configuration",
            "hideGenerationTimestamp": "true"
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}
